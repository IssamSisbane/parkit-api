tags:
  - name: Index
    description: index API
  - name: Users
    description: users API
  - name: Auth
    description: auth API

paths:
  ## INDEX
  # [GET] status
  /status:
    get:
      tags:
        - Index
      summary: Get Status
      responses:
        200:
          description: "OK"
        500:
          description: "Server Error"

  ## USERS
  # [GET] users
  /users:
    get:
      tags:
        - Users
      summary: Find All Users
      responses:
        200:
          description: "OK"
        500:
          description: "Server Error"

    # [POST] users
    post:
      tags:
        - Users
      summary: Add User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/definitions/registerUserDto"
      responses:
        201:
          description: "Created"
        400:
          description: "Bad Request"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  # [GET] users/id
  /users/{id}:
    get:
      tags:
        - Users
      summary: Find User By Id
      parameters:
        - name: id
          in: path
          description: User Id
          required: true
      responses:
        200:
          description: "OK"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

    # [PUT] users/id
    put:
      tags:
        - Users
      summary: Update User By Id
      parameters:
        - name: id
          in: path
          description: user Id
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/definitions/users"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad Request"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

    # [DELETE] users/id
    delete:
      tags:
        - Users
      summary: Delete User By Id
      parameters:
        - name: id
          in: path
          description: user Id
          required: true
      responses:
        200:
          description: "OK"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  ## AUTH
  # [POST] auth/login
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/definitions/loginUserDto"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad Request"
        401:
          description: "Wrong authentication token"
        404:
          description: "Authentication token missing"
        500:
          description: "Server Error"

  # [POST] auth/signin
  /auth/signin:
    post:
      tags:
        - Auth
      summary: Register
      requestBody:
        description: user Data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/definitions/registerUserDto"
      responses:
        201:
          description: "Created"
        400:
          description: "Bad Request"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  # [POST] auth/logout
  /auth/logout:
    post:
      tags:
        - Auth
      summary: Logout
      responses:
        200:
          description: "OK"
        401:
          description: "Unauthorized"
        500:
          description: "Server Error"

# definitions
definitions:
  users:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
        description: user Email
      password:
        type: string
        description: user Password
  loginUserDto:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
        description: user Email
      password:
        type: string
        description: user Password
  registerUserDto:
    type: object
    required:
      - email
      - password
      - firstName
      - lastName
    properties:
      email:
        type: string
        description: user Email
      password:
        type: string
        description: user Password
      firstName:
        type: string
        description: user First Name
      lastName:
        type: string
        description: user Last Name

schemes:
  - https
  - http
