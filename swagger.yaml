tags:
  - name: Index
    description: index API
  - name: Users
    description: users API
  - name: Auth
    description: auth API

paths:
  ## INDEX
  # [GET] status
  /status:
    get:
      tags:
        - Index
      summary: Get Status
      responses:
        200:
          description: "OK"
        500:
          description: "Server Error"

  ## AUTH
  # [POST] auth/login
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/definitions/loginUserDto"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad Request"
        401:
          description: "Wrong authentication token"
        404:
          description: "Authentication token missing"
        500:
          description: "Server Error"

  # [POST] auth/register
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register
      requestBody:
        description: user Data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/definitions/User"
      responses:
        201:
          description: "Created"
        400:
          description: "Bad Request"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  # [GET] auth/me
  /auth/me:
    get:
      security:
        - bearerAuth: []
      tags:
        - Auth
      summary: Find Logged user infos
      responses:
        200:
          description: "OK"
        500:
          description: "Server Error"

  # [GET] auth/refresh
  /auth/refresh:
    get:
      security:
        - bearerAuth: []
      tags:
        - Auth
      summary: Refresh access token
      responses:
        200:
          description: "OK"
        401:
          description: "Unauthorized"
        500:
          description: "Server Error"

  ## USERS
  # [GET] users
  /users:
    get:
      security:
        - bearerAuth: []
      tags:
        - Users
      summary: Find All Users
      responses:
        200:
          description: "OK"
        500:
          description: "Server Error"

  # [GET] users/username
  /users/{username}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Users
      summary: Find User By username
      parameters:
        - name: username
          in: path
          description: User username
          required: true
      responses:
        200:
          description: "OK"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

    # [PUT] users/_id
    put:
      security:
        - bearerAuth: []
      tags:
        - Users
      summary: Update User By username
      parameters:
        - name: username
          in: path
          description: user username
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/definitions/User"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad Request"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

    # [DELETE] users/_id
    delete:
      security:
        - bearerAuth: []
      tags:
        - Users
      summary: Delete User By username
      parameters:
        - name: username
          in: path
          description: user username
          required: true
      responses:
        200:
          description: "OK"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  ## SPOTS
  # [GET] spots
  /spots:
    get:
      security:
        - bearerAuth: []
      tags:
        - Spots
      summary: Find All Spots
      responses:
        200:
          description: "OK"
        500:
          description: "Server Error"

    # [POST] spots
    post:
      security:
        - bearerAuth: []
      tags:
        - Spots
      summary: Add Spot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/definitions/Spot"
      responses:
        201:
          description: "Created"
        400:
          description: "Bad Request"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  # [GET] spots/_id
  /spots/{_id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Spots
      summary: Find Spot By _Id
      parameters:
        - name: _id
          in: path
          description: Spot _Id
          required: true
      responses:
        200:
          description: "OK"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

    # [PUT] spots/_id
    put:
      security:
        - bearerAuth: []
      tags:
        - Spots
      summary: Update Spot By _Id
      parameters:
        - name: _id
          in: path
          description: spot _Id
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/definitions/Spot"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad Request"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

    # [DELETE] spots/_id
    delete:
      security:
        - bearerAuth: []
      tags:
        - Spots
      summary: Delete Spot By _Id
      parameters:
        - name: _id
          in: path
          description: spot _Id
          required: true
      responses:
        200:
          description: "OK"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  # [GET] spots/parking
  /spots/parking/{parkingId}:
    post:
      security:
        - bearerAuth: []
      tags:
        - Spots
      summary: Find All Spots
      parameters:
        - name: parkingId
          in: path
          description: Parking _Id
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: string
              description: Spot state
      responses:
        200:
          description: "OK"
        500:
          description: "Server Error"

  ## RESERVATIONS
  # [GET] reservations
  /reservations:
    get:
      security:
        - bearerAuth: []
      tags:
        - Reservations
      summary: Find All Reservations
      responses:
        200:
          description: "OK"
        500:
          description: "Server Error"

    # [POST] spots
    post:
      security:
        - bearerAuth: []
      tags:
        - Reservations
      summary: Add Reservation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/definitions/Reservation"
      responses:
        201:
          description: "Created"
        400:
          description: "Bad Request"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  # [GET] reservations/_id
  /reservations/{_id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Reservations
      summary: Find Reservation By _Id
      parameters:
        - name: _id
          in: path
          description: Reservation _Id
          required: true
      responses:
        200:
          description: "OK"
        409:
          description: "Conflict"
        500:
          description: "Server Error"
    # [PUT] reservations/_id
    put:
      security:
        - bearerAuth: []
      tags:
        - Reservations
      summary: Update Reservation By _Id
      parameters:
        - name: _id
          in: path
          description: reservation _Id
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/definitions/Reservation"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad Request"
        409:
          description: "Conflict"
        500:
          description: "Server Error"
    # [DELETE] reservations/_id
    delete:
      security:
        - bearerAuth: []
      tags:
        - Reservations
      summary: Delete Reservation By _Id
      parameters:
        - name: _id
          in: path
          description: reservation _Id
          required: true
      responses:
        200:
          description: "OK"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  /reservations/getByUser/{username}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Reservations
      summary: Find Reservation By username
      parameters:
        - name: username
          in: path
          description: user's username
          required: true
      responses:
        200:
          description: "OK"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  /reservations/getBySpot/{spotId}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Reservations
      summary: Find Reservation By spotId
      parameters:
        - name: spotId
          in: path
          description: spot's spotId
          required: true
      responses:
        200:
          description: "OK"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  ## USERS
  # [GET] parkings
  /parkings:
    get:
      security:
        - bearerAuth: []
      tags:
        - Parkings
      summary: Find All Parkings
      responses:
        200:
          description: "OK"
        500:
          description: "Server Error"
    # [POST] parkings
    post:
      security:
        - bearerAuth: []
      tags:
        - Parkings
      summary: Add Parking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/definitions/Parking"
      responses:
        201:
          description: "Created"
        400:
          description: "Bad Request"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  # [GET] parkings/_id
  /parkings/{_id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Parkings
      summary: Find Parking By _Id
      parameters:
        - name: _id
          in: path
          description: Parking _Id
          required: true
      responses:
        200:
          description: "OK"
        409:
          description: "Conflict"
        500:
          description: "Server Error"
    # [PUT] parkings/_id
    put:
      security:
        - bearerAuth: []
      tags:
        - Parkings
      summary: Update Parking By _Id
      parameters:
        - name: _id
          in: path
          description: parking _Id
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/definitions/Parking"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad Request"
        409:
          description: "Conflict"
        500:
          description: "Server Error"
    # [DELETE] parkings/_id
    delete:
      security:
        - bearerAuth: []
      tags:
        - Parkings
      summary: Delete Parking By _Id
      parameters:
        - name: _id
          in: path
          description: parking _Id
          required: true
      responses:
        200:
          description: "OK"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

# definitions
definitions:
  ## Users
  User:
    type: object
    required:
      - username
      - email
      - profilePicture
      - password
    properties:
      username:
        type: string
        description: user username
      email:
        type: string
        description: user Email
      profilePicture:
        type: number
        description: user profile picture
      password:
        type: string
        description: user Password
  loginUserDto:
    type: object
    required:
      - username
      - password
    properties:
      username:
        type: string
        description: user username
      password:
        type: string
        description: user Password
  registerUserDto:
    type: object
    required:
      - username
      - email
      - password
    properties:
      username:
        type: string
        description: user username
      email:
        type: string
        description: user email
      password:
        type: string
        description: user Password
  ## Spots
  Spot:
    type: object
    required:
      - name
      - state
      - row
      - column
      - parking
    properties:
      name:
        type: string
        description: spot _id
      state:
        type: string
        description: spot state
      row:
        type: number
        description: spot row
      column:
        type: number
        description: spot column
      parking:
        type: string
        description: parking ref
  ## Reservations
  Reservation:
    type: object
    required:
      - user
      - spot
      - createdAt
      - startedAt
      - endedAt
    properties:
      user:
        type: string
        description: user object
      spot:
        type: string
        description: spot object
      createdAt:
        type: string
        format: date-time
        description: reservation creation date
      startedAt:
        type: string
        format: date-time
        description: reservation start date
      endedAt:
        type: string
        format: date-time
        description: reservation end date
  ## Parkings
  Parking:
    type: object
    required:
      - _id
      - name
      - address
      - columnNumber
      - rowNumber
    properties:
      _id:
        type: string
        description: parking _id
      name:
        type: string
        description: parking name
      address:
        type: string
        description: parking address
      columnNumber:
        type: number
        description: parking column number
      rowNumber:
        type: number
        description: parking row number
schemes:
  - https
  - http
